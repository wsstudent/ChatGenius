logging:
  level:
    org.springframework.web: INFO
    com.github.binarywang.demo.wx.mp: DEBUG
    me.chanjar.weixin: DEBUG
mybatis-plus:
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
spring:
  profiles:
    #运行的环境
    active: test
  application:
    name: mallchat
  datasource:
    url: jdbc:mysql://${mallchat.mysql.ip}:${mallchat.mysql.port}/${mallchat.mysql.db}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
    username: ${mallchat.mysql.username}
    password: ${mallchat.mysql.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: 3
      maximum-pool-size: 10
      max-lifetime: 30000   #不能小于30秒，否则默认回到1800秒
      connection-test-query: SELECT 1
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  redis:
    # Redis服务器地址
    host: ${mallchat.redis.host}
    # Redis服务器端口号
    port: ${mallchat.redis.port}
    # Redis密码
    password: 123456
    # 使用的数据库索引，默认是0
    database: 0
    # 连接超时时间
    timeout: 1800000
  # 新增 Redisson 配置
#  redisson:
#    config:
#      singleServerConfig:
#        address: "redis://${mallchat.redis.host}:${mallchat.redis.port}"
#        username: ${mallchat.redis.username}
#        password: ${mallchat.redis.password}
#        database: 0


  jackson:
    serialization:
      write-dates-as-timestamps: true
jwt:
  secret: ${mallchat.jwt.secret}
wx:
  mp:
    callback: ${mallchat.wx.callback}
    configs:
      - appId: ${mallchat.wx.appId} # 第一个公众号的appid
        secret: ${mallchat.wx.secret} # 公众号的appsecret
        token: ${mallchat.wx.token} # 接口配置里的Token值
        aesKey: ${mallchat.wx.aesKey} # 接口配置里的EncodingAESKey值
chatai:
  chatgpt:
    use: ${mallchat.chatgpt.use}
    AIUserId: ${mallchat.chatgpt.uid}
    key: ${mallchat.chatgpt.key}
    proxyUrl: ${mallchat.chatgpt.proxyUrl}
  chatglm2:
    use: ${mallchat.chatglm2.use}
    url: ${mallchat.chatglm2.url}
    minute: 3 # 每个用户每3分钟可以请求一次
    AIUserId: ${mallchat.chatglm2.uid}
rocketmq:
  name-server: ${mallchat.rocketmq.name-server}
  # 默认的消息组
  producer:
    group: chatGroup
    send-message-timeout: 3000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
    compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    retry-times-when-send-failed: 2 # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 2 # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    access-key: ${mallchat.rocketmq.access-key} # Access Key
    secret-key: ${mallchat.rocketmq.secret-key} # Secret Key
    enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
  # Consumer 配置项
  consumer:
    access-key: ${mallchat.rocketmq.access-key} # Access Key
    secret-key: ${mallchat.rocketmq.secret-key} # Secret Key
    listeners: # 配置某个消费分组，是否监听指定 Topic 。
      erbadagang-consumer-group:
        topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费